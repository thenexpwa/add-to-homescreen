<?php
/**
 * @package     add-to-homescreen
 * @author      NexPWA <hello@nexpwa.com>
 * @license     https://opensource.org/licenses/OSL-3.0 Open Software License v. 3.0 (OSL-3.0)
 * @link        http://www.nexpwa.com/
 * @copyright   Copyright Â© 2020 Codilar Technologies Pvt. Ltd.. All rights reserved
 */
?>
<?php
/** @var \NexPWA\AddToHomescreen\Block\ServiceWorker $block */
?>
<script type="text/javascript">
/*
     Copyright 2016 Google Inc. All Rights Reserved.
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 */

// Names of the two caches used in this version of the service worker.
// Change to v2, etc. when you update any of the local resources, which will
// in turn trigger the install event again.
var PRECACHE = 'precache-<?php echo $block->getCacheVersion() ?>';
var RUNTIME = 'runtime';

// A list of local resources we always want to be cached.
var PRECACHE_URLS = <?php echo \json_encode($block->getPreCacheUrls()) ?>;

var IS_SHOW_CACHED_DATA = <?php echo $block->isShowCachedData() ? 'true' : 'false' ?>;
var NO_INTERNET_HTML = '<?php echo str_replace("'", "\\'", $block->getNoInternetHtml()) ?>';

// The install handler takes care of precaching the resources we always need.
self.addEventListener('install', function (event) {
    event.waitUntil(
        caches.open(PRECACHE)
            .then(function (cache) {
                return cache.addAll(PRECACHE_URLS);
            }).then(self.skipWaiting())
    );
});

// The activate handler takes care of cleaning up old caches.
self.addEventListener('activate', function (event) {
    const currentCaches = [PRECACHE, RUNTIME];
    event.waitUntil(
        caches.keys().then(function (cacheNames) {
            return cacheNames.filter(function (cacheName) {
                return !currentCaches.includes(cacheName);
            });
        }).then(function (cachesToDelete) {
            return Promise.all(cachesToDelete.map(function (cacheToDelete) {
                return caches.delete(cacheToDelete);
            }));
        }).then(function () {
            return self.clients.claim()
        })
    );
});

// The fetch handler serves responses for same-origin resources from a cache.
// If no response is found, it populates the runtime cache with the response
// from the network before returning it to the page.
self.addEventListener('fetch', function (event) {
    if (event.request.method === 'GET') {
        // Skip cross-origin requests, like those for Google Analytics.
        if (event.request.url.startsWith(self.location.origin)) {
            event.respondWith(
                caches.open(RUNTIME).then(function (cache) {
                    return fetch(event.request).then(function (response) {
                        // Put a copy of the response in the runtime cache.
                        return cache.put(event.request, response.clone()).then(function () {
                            return response;
                        });
                    }).catch(function (e) {
                        var noInternetResponse = new Response(NO_INTERNET_HTML, {
                            "status": 408,
                            "headers": {
                                "Content-Type": "text/html"
                            }
                        });
                        if (IS_SHOW_CACHED_DATA) {
                            return caches.match(event.request).then(function (cachedResponse) {
                                if (cachedResponse) {
                                    return cachedResponse;
                                } else {
                                    return noInternetResponse;
                                }
                            });
                        } else {
                            return noInternetResponse;
                        }
                    });
                })
            );
        }
    }
    return; // ignore everything else
});
</script>
